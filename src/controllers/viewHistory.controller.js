'use strict';

const viewHistoryService = require('../services/viewHistory.service');

// üü¢ Ghi l·∫°i ho·∫∑c c·∫≠p nh·∫≠t l·ªãch s·ª≠ xem
const recordView = async (req, res) => {
  try {
    const customerId = req.user.id; // L·∫•y t·ª´ token
    const { productId  } = req.body;
    console.log("productId", productId)
    if (!productId  || isNaN(parseInt(productId ))) {
      return res.status(400).json({ success: false, message: 'product_id kh√¥ng h·ª£p l·ªá.' });
    }

    const result = await viewHistoryService.recordView(customerId, productId );

    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t l·ªãch s·ª≠ xem th√†nh c√¥ng!',
      data: result
    });
  } catch (error) {
    console.error("Record ViewHistory Error:", error.message);
    res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô khi ghi l·ªãch s·ª≠ xem.' });
  }
};

// üü¢ L·∫•y danh s√°ch l·ªãch s·ª≠ xem c·ªßa ng∆∞·ªùi d√πng
const getRecentViews = async (req, res) => {
  try {
    const customerId = req.user.id;
    const { limit = 10, page = 1 } = req.query;

    const result = await viewHistoryService.getRecentViews(customerId, { limit, page });

    res.status(200).json({
      success: true,
      data: result.rows,
      pagination: {
        totalItems: result.count,
        totalPages: Math.ceil(result.count / limit),
        currentPage: parseInt(page),
        pageSize: parseInt(limit)
      }
    });
  } catch (error) {
    console.error("Get Recent Views Error:", error.message);
    res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô khi l·∫•y l·ªãch s·ª≠ xem.' });
  }
};

// üü¢ X√≥a 1 b·∫£n ghi l·ªãch s·ª≠ xem (t√πy ch·ªçn)
const deleteViewHistory = async (req, res) => {
  try {
    const { id } = req.params;
    const customerId = req.user.id;

    await viewHistoryService.deleteViewHistory(id, customerId);

    res.status(200).json({
      success: true,
      message: 'X√≥a l·ªãch s·ª≠ xem th√†nh c√¥ng!'
    });
  } catch (error) {
    console.error("Delete ViewHistory Error:", error.message);
    if (error.message.includes('Kh√¥ng t√¨m th·∫•y')) {
      return res.status(404).json({ success: false, message: error.message });
    }
    res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô khi x√≥a l·ªãch s·ª≠ xem.' });
  }
};

module.exports = {
  recordView,
  getRecentViews,
  deleteViewHistory
};
